image: docker:19.03.12

variables:
  REGION: us-east-1
  CONTAINER_SERVICE_NAME: cron

services:
  - docker:18.09.7-dind

deploy-dev:
  stage: deploy
  image: docker
  before_script:
    - apk --update --no-cache add binutils curl nodejs jq
    - apk info libc6-compat && apk del libc6-compat
    - curl -sL https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub
    - curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.32-r0/glibc-2.32-r0.apk
    - curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.32-r0/glibc-bin-2.32-r0.apk
    - apk add --force-overwrite --no-cache glibc-2.32-r0.apk glibc-bin-2.32-r0.apk
    - cd /tmp
    - mkdir work
    - cd work
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - cd ..
    - rm -rf work
    - curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
    - chmod +x /usr/local/bin/lightsailctl
    - mkdir ~/.aws || echo pass
    - echo '[default]' >| ~/.aws/credentials
    - echo "aws_access_key_id=$DEV_AWS_ACCESS_KEY" >> ~/.aws/credentials
    - echo "aws_secret_access_key=$DEV_SECRET_ACCESS_KEY" >> ~/.aws/credentials
    - echo '[default]' >| ~/.aws/config
    - echo region=$REGION >> ~/.aws/config
    - echo 'output=json' >> ~/.aws/config
    - cd /builds/plataforma-5/cron-api
  script:
    - echo "Starting DEV build process"

    - echo "Building image..."
    - docker build -f ./Dockerfile --load -t $CONTAINER_SERVICE_NAME:$CI_COMMIT_SHORT_SHA .

    - echo "Pushing image..."

    - aws lightsail push-container-image --region $REGION --service-name $CONTAINER_SERVICE_NAME --label latest --image $CONTAINER_SERVICE_NAME:$CI_COMMIT_SHORT_SHA

    - echo "Fetching current deployment environment..."
    - CURRENT_DEPLOYMENT_ENVIRONMENT=$(aws lightsail get-container-services --service $CONTAINER_SERVICE_NAME | jq -r .containerServices[0].currentDeployment.containers | jq to_entries[] | jq .value.environment)

    - echo "Fetching new image tag..."

    - PIPELINE_IMAGE_TAG=$(aws lightsail get-container-images --service $CONTAINER_SERVICE_NAME | jq -r .containerImages[0].image)

    - echo "Starting DEV deploy process"
    - echo "Updating the service..."

    - aws lightsail create-container-service-deployment
      --region $REGION
      --service-name $CONTAINER_SERVICE_NAME
      --containers "{\"$CONTAINER_SERVICE_NAME\":{\"image\":\"$PIPELINE_IMAGE_TAG\",\"ports\":{\"80\":\"HTTP\"}, \"environment\":$CURRENT_DEPLOYMENT_ENVIRONMENT}}"
  only:
    - dev
  when: manual
  environment: dev

deploy-prod:
  stage: deploy
  image: docker
  before_script:
    - apk --update --no-cache add binutils curl nodejs jq
    - apk info libc6-compat && apk del libc6-compat
    - curl -sL https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub
    - curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.32-r0/glibc-2.32-r0.apk
    - curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.32-r0/glibc-bin-2.32-r0.apk
    - apk add --force-overwrite --no-cache glibc-2.32-r0.apk glibc-bin-2.32-r0.apk
    - cd /tmp
    - mkdir work
    - cd work
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - cd ..
    - rm -rf work
    - curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
    - chmod +x /usr/local/bin/lightsailctl
    - mkdir ~/.aws || echo pass
    - echo '[default]' >| ~/.aws/credentials
    - echo "aws_access_key_id=$CENTRAL_AWS_ACCESS_KEY" >> ~/.aws/credentials
    - echo "aws_secret_access_key=$CENTRAL_SECRET_ACCESS_KEY" >> ~/.aws/credentials
    - echo '[default]' >| ~/.aws/config
    - echo region=$REGION >> ~/.aws/config
    - echo 'output=json' >> ~/.aws/config
    - cd /builds/plataforma-5/cron-api
  script:
    - echo "Starting PROD build process"

    - echo "Building image..."
    - docker build -f ./Dockerfile --load -t $CONTAINER_SERVICE_NAME:$CI_COMMIT_SHORT_SHA .

    - echo "Pushing image..."

    - aws lightsail push-container-image --region $REGION --service-name $CONTAINER_SERVICE_NAME --label latest --image $CONTAINER_SERVICE_NAME:$CI_COMMIT_SHORT_SHA

    - echo "Fetching current deployment environment..."
    - CURRENT_DEPLOYMENT_ENVIRONMENT=$(aws lightsail get-container-services --service $CONTAINER_SERVICE_NAME | jq -r .containerServices[0].currentDeployment.containers | jq to_entries[] | jq .value.environment)

    - echo "Fetching new image tag..."

    - PIPELINE_IMAGE_TAG=$(aws lightsail get-container-images --service $CONTAINER_SERVICE_NAME | jq -r .containerImages[0].image)

    - echo "Starting PROD deploy process"
    - echo "Updating the service..."

    - aws lightsail create-container-service-deployment
      --region $REGION
      --service-name $CONTAINER_SERVICE_NAME
      --containers "{\"$CONTAINER_SERVICE_NAME\":{\"image\":\"$PIPELINE_IMAGE_TAG\",\"ports\":{\"80\":\"HTTP\"}, \"environment\":$CURRENT_DEPLOYMENT_ENVIRONMENT}}"
  only:
    - main
  when: manual
  environment: prod
